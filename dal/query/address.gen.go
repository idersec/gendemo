// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"gendemo/dal/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newAddr(db *gorm.DB) addr {
	_addr := addr{}

	_addr.addrDo.UseDB(db)
	_addr.addrDo.UseModel(&model.Addr{})

	tableName := _addr.addrDo.TableName()
	_addr.ALL = field.NewField(tableName, "*")
	_addr.ID = field.NewInt32(tableName, "id")
	_addr.Address = field.NewString(tableName, "address")
	_addr.Name = field.NewString(tableName, "name")
	_addr.Tag = field.NewString(tableName, "tag")
	_addr.UserID = field.NewInt32(tableName, "user_id")

	return _addr
}

type addr struct {
	addrDo addrDo

	ALL     field.Field
	ID      field.Int32
	Address field.String
	Name    field.String
	Tag     field.String
	UserID  field.Int32
}

func (a *addr) WithContext(ctx context.Context) *addrDo { return a.addrDo.WithContext(ctx) }

func (a addr) TableName() string { return a.addrDo.TableName() }

func (a addr) clone(db *gorm.DB) addr {
	a.addrDo.ReplaceDB(db)
	return a
}

type addrDo struct{ gen.DO }

func (a addrDo) Debug() *addrDo {
	return a.withDO(a.DO.Debug())
}

func (a addrDo) WithContext(ctx context.Context) *addrDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a addrDo) Clauses(conds ...clause.Expression) *addrDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a addrDo) Not(conds ...gen.Condition) *addrDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a addrDo) Or(conds ...gen.Condition) *addrDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a addrDo) Select(conds ...field.Expr) *addrDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a addrDo) Where(conds ...gen.Condition) *addrDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a addrDo) Order(conds ...field.Expr) *addrDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a addrDo) Distinct(cols ...field.Expr) *addrDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a addrDo) Omit(cols ...field.Expr) *addrDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a addrDo) Join(table schema.Tabler, on ...field.Expr) *addrDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a addrDo) LeftJoin(table schema.Tabler, on ...field.Expr) *addrDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a addrDo) RightJoin(table schema.Tabler, on ...field.Expr) *addrDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a addrDo) Group(cols ...field.Expr) *addrDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a addrDo) Having(conds ...gen.Condition) *addrDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a addrDo) Limit(limit int) *addrDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a addrDo) Offset(offset int) *addrDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a addrDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *addrDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a addrDo) Unscoped() *addrDo {
	return a.withDO(a.DO.Unscoped())
}

func (a addrDo) Create(values ...*model.Addr) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a addrDo) CreateInBatches(values []*model.Addr, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a addrDo) Save(values ...*model.Addr) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a addrDo) First() (*model.Addr, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Addr), nil
	}
}

func (a addrDo) Take() (*model.Addr, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Addr), nil
	}
}

func (a addrDo) Last() (*model.Addr, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Addr), nil
	}
}

func (a addrDo) Find() ([]*model.Addr, error) {
	result, err := a.DO.Find()
	return result.([]*model.Addr), err
}

func (a addrDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) ([]*model.Addr, error) {
	result, err := a.DO.FindInBatch(batchSize, fc)
	return result.([]*model.Addr), err
}

func (a addrDo) FindInBatches(result []*model.Addr, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(&result, batchSize, fc)
}

func (a addrDo) Attrs(attrs ...field.AssignExpr) *addrDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a addrDo) Assign(attrs ...field.AssignExpr) *addrDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a addrDo) Joins(field field.RelationField) *addrDo {
	return a.withDO(a.DO.Joins(field))
}

func (a addrDo) Preload(field field.RelationField) *addrDo {
	return a.withDO(a.DO.Preload(field))
}

func (a addrDo) FirstOrInit() (*model.Addr, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Addr), nil
	}
}

func (a addrDo) FirstOrCreate() (*model.Addr, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Addr), nil
	}
}

func (a addrDo) FindByPage(offset int, limit int) (result []*model.Addr, count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	result, err = a.Offset(offset).Limit(limit).Find()
	return
}

func (a *addrDo) withDO(do gen.Dao) *addrDo {
	a.DO = *do.(*gen.DO)
	return a
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		Addr:       newAddr(db),
		Bank:       newBank(db),
		Company:    newCompany(db),
		CreditCard: newCreditCard(db),
		Customer:   newCustomer(db),
		Passport:   newPassport(db),
		Person:     newPerson(db),
		TestField:  newTestField(db),
		User:       newUser(db),
	}
}

type Query struct {
	db *gorm.DB

	Addr       addr
	Bank       bank
	Company    company
	CreditCard creditCard
	Customer   customer
	Passport   passport
	Person     person
	TestField  testField
	User       user
}

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		Addr:       q.Addr.clone(db),
		Bank:       q.Bank.clone(db),
		Company:    q.Company.clone(db),
		CreditCard: q.CreditCard.clone(db),
		Customer:   q.Customer.clone(db),
		Passport:   q.Passport.clone(db),
		Person:     q.Person.clone(db),
		TestField:  q.TestField.clone(db),
		User:       q.User.clone(db),
	}
}

type queryCtx struct {
	Addr       addrDo
	Bank       bankDo
	Company    companyDo
	CreditCard creditCardDo
	Customer   customerDo
	Passport   passportDo
	Person     personDo
	TestField  testFieldDo
	User       userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Addr:       *q.Addr.WithContext(ctx),
		Bank:       *q.Bank.WithContext(ctx),
		Company:    *q.Company.WithContext(ctx),
		CreditCard: *q.CreditCard.WithContext(ctx),
		Customer:   *q.Customer.WithContext(ctx),
		Passport:   *q.Passport.WithContext(ctx),
		Person:     *q.Person.WithContext(ctx),
		TestField:  *q.TestField.WithContext(ctx),
		User:       *q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
